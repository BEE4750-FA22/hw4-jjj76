---
title: "BEE 4750/5750 Homework 4"
author: "Jaden Jeswald (jjj76)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
    term: false
    results: tex
    cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
Pkg.add("HiGHS")
```

# Problem 1
### Two cities MSW disposal plan
### Three disposal alternatives: LF, MRF, WTE 
### facility, capacity, fixed cost, tipping fee, recycling
### transportation $1.5 /MG-km

## Problem 1.1
```julia
#Facilities
capacities = [150, 350, 200]; 
fixed_costs = [2500; 1500; 2000];
tipping_fees = [60, 7, 50];

#Relative Distances
city1_dist = [15, 5, 30];
city2_dist = [10, 15, 25];

#Other
transport_cost = 1.5;
solid_waste_production = [100, 170];

components = ["Food", "Paper", "Plastic", "Textile", "Rubber", "Wood", "Yard", "Glass", "Fe", "Al", "Metal", "Misc"]
mass_percent = [0.15, 0.40, 0.05, 0.03, 0.02, 0.05, 0.18, 0.04, 0.02, 0.02, 0.01, 0.03]
ash_percent = [0.08, 0.07, 0.05, 0.10, 0.15, 0.02, 0.02, 1, 1, 1, 1, 0.70]
rec_percent = [0, 0.55, 0.15, 0.10, 0, 0.30, 0.40, 0.60, 0.75, 0.80, 0.50, 0]

fraction_rec = round(sum(mass_percent .* rec_percent), digits = 4)
fraction_ash_dir = round(sum(mass_percent .* ash_percent), digits = 4)

#Results 
println("overall recycling fraction is ", fraction_rec)
println("overall ash fraction is ", fraction_ash_dir)

```

## Problem 1.2
Decision variables for optimization problem:
$W_{i,j}$, Waste transported from city i to disposal j(Mg/day)
$R_{k,j}$, Residual waste from disposal k to disposal j (Mg/day)
$Y_{j}$, Operational status disposal j (true or false)


## Problem 1.3
```math
cost = \sum_i\sum_j a_{ij}1_{ij}W_{ij} + \sum_j [c_jY_j+\sum_ib_jW_{ij}]
```

```julia 
using JuMP
using HiGHS

waste = Model(HiGHS.Optimizer)
cities = ["A", "B"]
disposal_sites = ["LF", "MRF", "WTE"]
I = 1:length(cities) #cities 
J = 1:length(disposal_sites) # disposal sites

cost_waste_transport = 1.5.*[(15*60) (5*7) (30*50);(10*60) (15*7) (25*50)]
cost_res = 1.5 *[0 (18*45) 15;0 0 0;0 (18*45) 0]


@variable(waste, W[i in I,j in J] >= 0)
@variable(waste, R[k in J,j in J] >= 0)
@variable(waste, Y[j in J], Bin)

@objective(waste, Min, sum(cost_waste_transport .* W) + sum(cost_res .* R) + sum(fixed_costs .* Y))
```
$a_{ij}$ is cost transporting waste from i to j in $/Mg-Km
$l_{ij}$ is the distance between sources i and disposal j (km) 
$c_j$ is a fixed cost of operating disposal j in (dollars/day) 
$b_j$ is a variable cost of disposing waste at disposal j in (dollars/Mg)

So 

Waste-to-Energy: $2500Y_1 + 60(W_{11}+W_{21}+R_{21})$
Material Recovery: $1500Y_2 + 7(W_{21}+W_{22})+0.3775(45)(W_{12}+W_{22})$
Landfill: $2000Y_3 + 50(W_{13}+W_{23}+R_{13}+R_{23})$
Transportation: $1.5[15W_{11}+5W_{12}+30W_{13}+10W_{21}+15W_{22}+25W_{23}+18R_{13}+15R_{21}+32R_{23}]$

## Problem 1.4
City Mass Balance: sum of waste 
City 1: $W_{11}+W_{12}+W_{13}=100$
City 2: $W_{21}+W_{22}+W_{23}=170$

Capacity Mass Balance: total weights
WTE: $W_{11}+W_{21}+R_{21} \leq 150$
MRF: $W_{12}+W_{22} \leq 350$
LF: $W_{13}+W_{23}+R_{23}+R_{13} \leq 200$

Recycling and Residual Ash: waste sent from WTE and sent from MRF
Residual: $R_{13} = 0.1641(W_{11}+W_{21})+0.1386R_{21})$
Recycling: $R_{21}+R_{23}=(1-0.3775)(W_{12}+W_{22})$

Commitment: binary variables and all waste is non negative
If $W_{11}+W_{21}+R_{21}=0$, $Y_1=0$, else $Y_1=1$
If $W_{21}+W_{22}=0$, $Y_1=0$, else $Y_1=1$
The landfill must be on: $Y_3=1$
Nonnegativity: $W_{ij},R_{ij} \geq 0$

## Problem 1.5

```julia
@constraint(waste, city[i in I], sum(W[i,:]) == solid_waste_production[i])
#WTE
@constraint(waste, WTE, W[1,1] + W[2,1] + R[2,1] <= capacities[1])
#MRF
@constraint(waste, MRF, W[1,2] + W[2,2]  <= capacities[2])
#LF
@constraint(waste, LF, W[1,3] + W[2,3] + R[2,3] + R[1,3] <= capacities[3])

# residuals
@constraint(waste, residual_1, R[1,3] == fraction_ash_dir .* (W[1,1] + W[2,1] + R[2,1]))
@constraint(waste, residual_2, R[2,1] + R[2,3] == (1-fraction_rec) .* (W[1,2] + W[2,2]))
@constraint(waste, residual_3, sum(R[3,:]) == 0)
@constraint(waste, noresidual_diag, sum(R[i, i] for i in I) == 0)
@constraint(waste, noresidual, R[1,2] == 0)

# commitments 
@constraint(waste, commit_1, W[1,1] + W[2,1] + R[2,1]- (10000*Y[1]) <= 0)
@constraint(waste, commit_2,  W[1,2] + W[2,2] - (10000*Y[2]) <= 0)
@constraint(waste, commit_3, Y[3] == 1)

optimize!(waste)
```

## Problem 1.6
### Draw diagram showing flows of waste 
### Report optimal objective value
```julia
cost_min = objective_value(waste)
commitments = value.(Y)
waste_values = value.(W)
residual_values = value.(R)

println("Objective Value ", objective_value)
println("Facility Not Used is the MRF")

```
![Waste Diagram](/Users/jaden/github-classroom/BEE4750-FA22/hw4-jjj76/figures/Waste Diagram.png)

# Problem 2
### Carbon Tax 
### WTE tipping fee increase
### Transportation costs increase
### discuss how this policy change will influence recommendation

## Problem 2.1
### What changes are needed to optimization 
Need to change objective function 
Waste-to-Energy: $2500Y_1 + 75(W_{11}+W_{21}+R_{21})$
Material Recovery: $1500Y_2 + 7(W_{21}+W_{22})+0.3775(45)(W_{12}+W_{22})$
Landfill: $2000Y_3 + 50(W_{13}+W_{23}+R_{13}+R_{23})$
Transportation: $2[15W_{11}+5W_{12}+30W_{13}+10W_{21}+15W_{22}+25W_{23}+18R_{13}+15R_{21}+32R_{23}]$

## Problem 2.2
### Implement new optimization 
```julia
using JuMP
using HiGHS

waste_new = Model(HiGHS.Optimizer)
cities = ["A", "B"]
disposal_sites = ["LF", "MRF", "WTE"]
I = 1:length(cities) #cities 
J = 1:length(disposal_sites) # disposal sites

cost_waste_transport = 2.0.*[(15*75) (5*7) (30*50);(10*75) (15*7) (25*50)]
cost_res = 2.0 * [0 (18*45) 15; 0 0 0; 0 (18*45) 0]


@variable(waste_new, W_new[i in I,j in J] >= 0)
@variable(waste_new, R_new[k in J,j in J] >= 0)
@variable(waste_new, Y_new[j in J], Bin)


@objective(waste_new, Min, sum(cost_waste_transport .* W_new)+sum(cost_res .* R_new)+sum(fixed_costs .* Y_new))

@constraint(waste_new, city_new[i in I], sum(W_new[i,:]) == solid_waste_production[i])
#WTE
@constraint(waste_new, WTE, W_new[1,1] + W_new[2,1] + R_new[2,1] <= capacities[1])
#MRF
@constraint(waste_new, MRF, W_new[1,2] + W_new[2,2]  <= capacities[2])
#LF
@constraint(waste_new, LF, W_new[1,3] + W_new[2,3] + R_new[2,3] + R_new[1,3] <= capacities[3])

# residuals
@constraint(waste_new, residual_1, R_new[1,3] == fraction_ash_dir .* (W_new[1,1] + W_new[2,1] + R_new[2,1]))
@constraint(waste_new, residual_2, R_new[2,1] + R_new[2,3] == (1-fraction_rec) .* (W_new[1,2] + W_new[2,2]))
@constraint(waste_new, residual_3, sum(R_new[3,:]) == 0)
@constraint(waste_new, noresidual_diag, sum(R_new[i, i] for i in I) == 0)
@constraint(waste_new, noresidual, R_new[1,2] == 0)

# commitments 
@constraint(waste_new, commit_1, W_new[1,1] + W_new[2,1] + R_new[2,1]- (10000*Y_new[1]) <= 0)
@constraint(waste_new, commit_2,  W_new[1,2] + W_new[2,2] - (10000*Y_new[2]) <= 0)
@constraint(waste_new, commit_3, Y_new[3] == 1)

optimize!(waste_new)
```
## Problem 2.3
### Find optimal solution and report optimal objective values
### Provide diagram showing new waste flows
```julia
cost_min = objective_value(waste)
commitments = value.(Y)
waste_values = value.(W)
residual_values = value.(R)

println("Objective Value ", objective_value)
println("Facility Not Used is the MRF")

```
![Waste Diagram New](/Users/jaden/github-classroom/BEE4750-FA22/hw4-jjj76/figures/Waste Diagram New.png)


# References
https://jump.dev/
https://jump.dev/JuMP.jl/stable/manual/constraints/
assitance from Akanksha Srivastava